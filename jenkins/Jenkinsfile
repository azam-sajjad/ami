pipeline {
    agent { label 'rhel' }
    parameters { 
        choice(name: 'AWS_REGION', choices:['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ap-south-1', 'ap-northeast-3', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'ca-central-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-north-1', 'sa-east-1'], description:'Select Region for AMI')
        choice(name: 'DISTRIBUTION', choices:['ECS', 'EKS', 'amazonLinux', 'CentOS', 'debian', 'ubuntu'], description:'Select Distribution for AMI')
        string description: """Major Release Version for Distribution e.g. 
        ECS/EKS     -> <Leave it Blank>
        amazonLinux -> 2/2023
        CentOS      -> 7/8/9
        Debian      -> 10/11/12
        Ubuntu      -> 18/20/22
        """, name: 'VERSION'
        string defaultValue: 'scaleops', description: 'Modify Prefix - AMI Naming Convention -> <PREFIX>-<DISTRIBUTION><VERSION>-<DATE> e.g. scaleops-amazonLinux2023-01-04-2024', name: 'AMI_PREFIX'
        booleanParam defaultValue: true, description: 'Create Partitions? (Check for Yes) | Creates 5G Partitions for each: /home /var /var/log /var/tmp With an Extra EBS Volume of 25G | < DOES NOT APPLY FOR ECS/EKS >', name: 'PARTITIONS'
        booleanParam defaultValue: true, description: 'Open Custom Ports for Services? (Check for Yes)', name: 'OPENPORTS'
        string defaultValue: '80', description: 'Open a Custom Port for Services', name: 'PORT1'
        string defaultValue: '443', description: 'Open a Custom Port for Services', name: 'PORT2'
        booleanParam defaultValue: true, description: 'Harden to 85+, Run Lynis Recommended Remediations e.g. install Malware Detector (tripwire,rkhunter), More Restrictive Permissions, Restrictive Network Parameters with Sysctl which improves Score', name: 'LYNIS'
        booleanParam defaultValue: false, description: 'Harden to 90+, Block SSH Access, Remove Keys, Only access will be AWS Session Manager!', name: 'LOCKDOWN'

}
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/azam-sajjad/ami.git'
            }
        }
        stage('Building ECS Image') {
            when {
                    expression {
                        return params.DISTRIBUTION == 'ECS'
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID=`aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id --region ${params.AWS_REGION} --query "Parameters[0].Value" --output text`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        cd packer
                        echo '========================= Building ${params.DISTRIBUTION} AMI ========================='
                        /usr/bin/packer init rpm/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build rpm/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building EKS Image') {
            when {
                    expression {
                        return params.DISTRIBUTION == 'EKS'
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID=`aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.29/amazon-linux-2/recommended/image_id --region ${params.AWS_REGION} --query "Parameter.Value" --output text`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        cd packer
                        echo '========================= Building ${params.DISTRIBUTION} AMI ========================='
                        /usr/bin/packer init rpm/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build rpm/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building Amazon Linux 2 Image') {
            when {
                allOf {
                    expression {
                            return params.DISTRIBUTION == 'amazonLinux'
                        }
                    expression {
                            return params.VERSION == '2'
                        }
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID_NAME_DATE=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=virtualization-type,Values=hvm Name=name,Values='amzn2-ami-kernel*'  --query 'sort_by(Images, &Name)[-1].[ImageId,Name,CreationDate]' --output text --region ${params.AWS_REGION} --owners 137112412989`
                        export AMI_ID=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=virtualization-type,Values=hvm Name=name,Values='amzn2-ami-kernel*'  --query 'sort_by(Images, &Name)[-1].[ImageId]' --output text --region ${params.AWS_REGION} --owners 137112412989`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        export USERNAME="ec2-user"
                        echo 'PARTITIONS=$PARTITIONS'
                        echo 'LYNIS=$LYNIS'
                        echo 'LOCKDOWN=$LOCKDOWN'
                        cd packer
                        echo '========================= Building Amazon Linux 2 AMI ========================='
                        /usr/bin/packer init rpm/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build rpm/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building Amazon Linux 2023 Image') {
            when {
                allOf {
                    expression {
                            return params.DISTRIBUTION == 'amazonLinux'
                        }
                    expression {
                            return params.VERSION == '2023'
                        }
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID_NAME_DATE=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=virtualization-type,Values=hvm Name=name,Values='al2023-ami-2023*'  --query 'sort_by(Images, &Name)[-1].[ImageId,Name,CreationDate]' --output text --region ${params.AWS_REGION} --owners 137112412989`
                        export AMI_ID=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=virtualization-type,Values=hvm Name=name,Values='al2023-ami-2023*'  --query 'sort_by(Images, &Name)[-1].[ImageId]' --output text --region ${params.AWS_REGION} --owners 137112412989`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        export USERNAME="ec2-user"
                        cd packer
                        echo '========================= Building Amazon Linux 2023 AMI ========================='
                        /usr/bin/packer init rpm/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build rpm/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building CentOS 7 Image') {
            when {
                allOf {
                    expression {
                            return params.DISTRIBUTION == 'CentOS'
                        }
                    expression {
                            return params.VERSION == '7'
                        }
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID_NAME_DATE=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='*SupportedImages) - ${params.DISTRIBUTION} ${params.VERSION}*'  --query 'sort_by(Images, &Name)[-1].[ImageId,Name,CreationDate]' --output text --region ${params.AWS_REGION} --owners 679593333241`
                        export AMI_ID=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='*SupportedImages) - ${params.DISTRIBUTION} ${params.VERSION}*'  --query 'sort_by(Images, &Name)[-1].[ImageId]' --output text --region ${params.AWS_REGION} --owners 679593333241`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        export USERNAME="centos"
                        cd packer
                        echo '========================= Building ${params.DISTRIBUTION} 7 AMI ========================='
                        /usr/bin/packer init rpm/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build rpm/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building CentOS Stream Image') {
            when {
                allOf {
                    expression {
                            return params.DISTRIBUTION == 'CentOS'
                        }
                    expression {
                            return params.VERSION != '7'
                        }
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID_NAME_DATE=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='${params.DISTRIBUTION}-Stream-ec2-${params.VERSION}*'  --query 'sort_by(Images, &Name)[-1].[ImageId,Name,CreationDate]' --output text --region ${params.AWS_REGION} --owners 679593333241`
                        export AMI_ID=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='${params.DISTRIBUTION}-Stream-ec2-${params.VERSION}*'  --query 'sort_by(Images, &Name)[-1].[ImageId]' --output text --region ${params.AWS_REGION} --owners 679593333241`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        export USERNAME="ec2-user"
                        cd packer
                        echo '========================= Building ${params.DISTRIBUTION} Stream AMI ========================='
                        /usr/bin/packer init rpm/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build rpm/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building Debian Image') {
            when {
                expression {
                        return params.DISTRIBUTION == 'debian'
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID_NAME_DATE=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='*${params.DISTRIBUTION}-${params.VERSION}-amd*'  --query 'sort_by(Images, &Name)[-1].[ImageId,Name,CreationDate]' --output text --region ${params.AWS_REGION} --owners 136693071363`
                        export AMI_ID=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='*${params.DISTRIBUTION}-${params.VERSION}-amd*'  --query 'sort_by(Images, &Name)[-1].[ImageId]' --output text --region ${params.AWS_REGION} --owners 136693071363`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        export USERNAME="admin"
                        cd packer
                        echo '========================= Building ${params.DISTRIBUTION} AMI ========================='
                        /usr/bin/packer init deb/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build deb/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
        stage('Building Ubuntu Image') {
            when {
                expression {
                        return params.DISTRIBUTION == 'ubuntu'
                    }
                }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'eurus-control']]) {
                    dir('packer') {
                        sh """
                        cd ..
                        export VPC_ID=`aws ec2 describe-vpcs  --vpc-ids --filters "Name=is-default,Values=true" --query "Vpcs[*].VpcId" --output text --region ${params.AWS_REGION}`
                        export SUBNET_ID=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=${env.VPC_ID}" --query "Subnets[*].SubnetId" --output text --region ${params.AWS_REGION} | awk '{print \$1}'`
                        export AMI_ID_NAME_DATE=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='ubuntu/images/hvm-ssd/${params.DISTRIBUTION}-*-${params.VERSION}.*'  --query 'sort_by(Images, &Name)[-1].[ImageId,Name,CreationDate]' --output text --region ${params.AWS_REGION} --owners 099720109477`
                        export AMI_ID=`aws ec2 describe-images --filters Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='ubuntu/images/hvm-ssd/${params.DISTRIBUTION}-*-${params.VERSION}.*'  --query 'sort_by(Images, &Name)[-1].[ImageId]' --output text --region ${params.AWS_REGION} --owners 099720109477`
                        export DIR=`pwd`
                        export DATE=`date +%d-%m-%Y`
                        export USERNAME="ubuntu"
                        cd packer
                        echo '========================= Building ${params.DISTRIBUTION} AMI ========================='
                        /usr/bin/packer init deb/${params.DISTRIBUTION}.pkr.hcl
                        /usr/bin/packer build deb/${params.DISTRIBUTION}.pkr.hcl
                        """
                    }
                }
            }
        }
    }
}